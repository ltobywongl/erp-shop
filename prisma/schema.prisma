generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @db.VarChar(36)
  email        String    @unique(map: "users_unique_1") @db.VarChar(100)
  password     String?   @db.VarChar(100)
  role         String    @default("user") @db.VarChar(36)
  balance      Float     @default(0)
  couponPoints Int       @default(0) @map("coupon_points")
  status       String?   @default("v") @db.VarChar(1)
  provider     String    @db.VarChar(16)
  createdAt    DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt    DateTime? @map("deleted_at") @db.DateTime(0)
  coupons      Coupon[]
  enquiries    Enquiry[]
  orders       Order[]
  payment      Payment[]
  Topup        Topup[]

  @@map("users")
}

model Coupon {
  id               String         @id @db.VarChar(36)
  userId           String         @map("user_id") @db.VarChar(36)
  couponCategoryId String         @map("coupon_categories_id") @db.VarChar(36)
  usedAt           DateTime?      @map("used_at") @db.DateTime(0)
  createdAt        DateTime       @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  couponCategory   CouponCategory @relation(fields: [couponCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "coupons_coupon_categories_FK")
  user             User           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "coupons_users_FK")
  Order            Order[]

  @@index([couponCategoryId], map: "coupons_coupon_categories_FK")
  @@index([userId], map: "coupons_users_FK")
  @@map("coupons")
}

model Category {
  id        String    @id @db.VarChar(36)
  name      Json
  discount  Float     @default(0)
  hidden    Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt DateTime? @map("deleted_at") @db.DateTime(0)
  products  Product[]

  @@map("categories")
}

model CouponCategory {
  id            String    @id @db.VarChar(36)
  name          String?   @db.VarChar(20)
  description   String?   @db.VarChar(255)
  imagePath     String?   @map("image_path") @db.VarChar(255)
  point         Int
  value         Float
  minCheckValue Float?    @map("min_check_value")
  useStock      Boolean   @default(false) @map("use_stock")
  stock         Int       @default(0)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt     DateTime? @map("deleted_at") @db.DateTime(0)
  coupons       Coupon[]

  @@map("coupon_categories")
}

model Enquiry {
  id        String   @id @db.VarChar(36)
  email     String   @db.VarChar(100)
  content   String   @db.Text
  done      Boolean  @default(false)
  userId    String?  @map("user_id") @db.VarChar(36)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enquiries_users_FK")

  @@index([userId], map: "enquiries_users_FK")
  @@map("enquiries")
}

model OrderItem {
  id        String   @id @db.VarChar(36)
  orderId   String   @map("order_id") @db.VarChar(36)
  productId String   @map("product_id") @db.VarChar(36)
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_orders_FK")
  product   Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_products_FK")

  @@index([productId], map: "order_items_products_FK")
  @@index([orderId], map: "order_items_orders_FK")
  @@map("order_items")
}

model Order {
  id              String      @id @db.VarChar(36)
  userId          String      @map("user_id") @db.VarChar(36)
  totalPrice      Float       @map("total_price")
  couponId        String?     @map("coupon_id") @db.VarChar(36)
  paymentId       String?     @map("payment_id") @db.VarChar(128)
  receiverName    String?     @map("receiver_name") @db.VarChar(100)
  receiverAddress String?     @map("receiver_address") @db.VarChar(255)
  state           String      @default("pending") @db.VarChar(20)
  createdAt       DateTime    @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt       DateTime    @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt       DateTime?   @map("deleted_at") @db.DateTime(0)
  topupId         String?     @db.VarChar(36)
  orderItem       OrderItem[]
  coupon          Coupon?     @relation(fields: [couponId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_coupons_FK")
  payment         Payment?    @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_payments_FK")
  Topup           Topup?      @relation(fields: [topupId], references: [id])
  user            User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_users_FK")

  @@index([userId], map: "orders_users_FK")
  @@index([couponId], map: "orders_coupons_FK")
  @@index([paymentId], map: "orders_payments_FK")
  @@index([topupId], map: "orders_topupId_fkey")
  @@map("orders")
}

model Product {
  id                       String      @id @db.VarChar(36)
  categoryId               String      @map("categories_id") @db.VarChar(36)
  name                     Json
  descriptionTranslationId Json?       @map("description_translation_id")
  image                    String?     @db.VarChar(255)
  price                    Float
  useStock                 Boolean     @default(false) @map("use_stock")
  stock                    Int         @default(0)
  discount                 Float       @default(0)
  couponPoint              Int         @default(0) @map("coupon_point")
  createdAt                DateTime    @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt                DateTime    @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt                DateTime?   @map("deleted_at") @db.DateTime(0)
  orderItems               OrderItem[]
  category                 Category    @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "products_categories_FK")

  @@index([categoryId], map: "products_categories_FK")
  @@map("products")
}

model ProductDescription {
  id        String    @id @db.VarChar(36)
  content   String    @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt DateTime? @map("deleted_at") @db.DateTime(0)

  @@map("product_descriptions")
}

model Topup {
  id        String   @id @db.VarChar(36)
  userId    String   @map("user_id") @db.VarChar(36)
  amount    Float
  imagePath String   @map("image_path") @db.VarChar(100)
  approved  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  Order     Order[]
  users     User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "topups_users_FK")

  @@index([userId], map: "topups_users_FK")
  @@map("topups")
}

model Payment {
  id        String   @id @db.VarChar(128)
  userId    String   @map("user_id") @db.VarChar(36)
  amount    Float
  state     String   @default("PENDING") @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  Order     Order[]
  users     User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "paymentss_users_FK")

  @@index([userId], map: "payments_users_FK")
  @@map("payments")
}

model WebsiteContent {
  id        Int      @id
  key       String   @unique(map: "website_key_unique") @db.VarChar(20)
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)

  @@map("website_contents")
}

model verifications {
  id        String    @id @db.VarChar(36)
  type      String    @db.VarChar(20)
  userId    String    @map("user_id") @db.VarChar(36)
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  deletedAt DateTime? @map("deleted_at") @db.DateTime(0)
  expiredAt DateTime? @map("expired_at") @db.DateTime(0)
}
